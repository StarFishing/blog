(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{308:function(e,t,n){"use strict";n.r(t);var a=n(39),s=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"富文本原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#富文本原理","aria-hidden":"true"}},[e._v("#")]),e._v(" 富文本原理")]),e._v(" "),n("h2",{attrs:{id:"缘起"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缘起","aria-hidden":"true"}},[e._v("#")]),e._v(" 缘起")]),e._v(" "),n("p",[e._v("最近产品想让我在富文本里加个旋转图片的功能，我一想 🤔，就觉得事情并不简单，因为印象中好像没见过这种操作。果然，经过一番百度之后，确实没怎么看到相关信息，这也就意味着要自己动手丰衣足食了 😢。但我自己对富文本又没什么了解，所以顺带稍微看了下富文本的实现方式，特此来沉淀一下，还是那句话不喜勿喷哈 🙄。\nok，这里先简要说下为什么会有富文本这种东西吧 🤓！大概可能也许是因为有一天产品用着用着 "),n("code",[e._v("textarea")]),e._v(" 感觉太单调了，单纯的文字已经无法表达他们内心的需求 🤯，于是就想来点样式，顺便加个图片，来篇图文并茂的文章，就像小型 Word 那样，就再好不过了！于是富文本就这样诞生了，开发者们也纷纷开始了踩坑之旅 🕳🕳🕳。")]),e._v(" "),n("h2",{attrs:{id:"前置知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前置知识","aria-hidden":"true"}},[e._v("#")]),e._v(" 前置知识")]),e._v(" "),n("p",[e._v("好了，交代完了背景，让我们先补充一些基础知识吧，不懂的请务必不要跳过 🧐！")]),e._v(" "),n("h3",{attrs:{id:"contenteditable-属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contenteditable-属性","aria-hidden":"true"}},[e._v("#")]),e._v(" contenteditable 属性")]),e._v(" "),n("p",[e._v("假如我们给一个标签加上 "),n("code",[e._v('contenteditable="true"')]),e._v(" 的属性，就像这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div contenteditable="true"></div>\n复制代码\n')])])]),n("p",[e._v("那么在这个 "),n("code",[e._v("div")]),e._v(" 中我们就可以对其进行任意编辑了。如果想要插入的子节点不可编辑，我们只需要把子节点的属性设置为 "),n("code",[e._v('contenteditable="false"')]),e._v(" 即可，就像这样：")]),e._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("div")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("contenteditable")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("这是可编辑的"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("p")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("contenteditable")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("false"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("这是不可编辑的"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("div")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n复制代码\n")])])]),n("p",[e._v("该属性最早是在 IE 上实现的（厉害哦 👍），且可以作用于其它标签，不限于 "),n("code",[e._v("div")]),e._v("，大家应该或多或少都听说过这个属性。")]),e._v(" "),n("h3",{attrs:{id:"document-execcommand-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#document-execcommand-方法","aria-hidden":"true"}},[e._v("#")]),e._v(" document.execCommand 方法")]),e._v(" "),n("p",[e._v("既然我们可以对上面的 "),n("code",[e._v("div")]),e._v(" 随意编辑，那具体怎么编辑呢，目前好像也还是只能输入文本，要怎样才能进行其他操作呢（比如加粗、倾斜、插入图片等等）🤔？其实浏览器给我们提供了这样的一个方法 "),n("code",[e._v("document.execCommand")]),e._v("，通过它我们就能够操纵上面的可编辑区。具体语法如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// document.execCommand(命令名称，是否展示用户界面，命令需要的额外参数)\ndocument.execCommand(aCommandName, aShowDefaultUI, aValueArgument)\n复制代码\n")])])]),n("p",[e._v("其中第一个参数就是一些命令名称，具体的可以查看 MDN；第二个参数写死为 "),n("code",[e._v("false")]),e._v(" 就行了，因为早前 IE 有这样一个参数，为了兼容吧，不过这个参数在现代浏览器中是没有影响的；第三个参数就是一些命令可能需要额外的参数，比如插入图片就要多传个 "),n("code",[e._v("url")]),e._v(" 或 "),n("code",[e._v("base64")]),e._v(" 的参数，没有的话传个 "),n("code",[e._v("null")]),e._v(" 就行。\n我们简要列举下它的几个使用方式，大家就知道怎么用了 👇：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 加粗\ndocument.execCommand('bold', false, null);\n// 添加图片\ndocument.execCommand('insertImage', false, url || base64);\n// 把一段文字用 p 标签包裹起来\ndocument.execCommand('formatblock', false, '<p>');\n复制代码\n")])])]),n("p",[e._v("这个命令就是富文本的核心（所以务必记住），浏览器把大部分我们能想到的功能也都实现了，当然各浏览器之间还是有差异的，这里就不考虑了。")]),e._v(" "),n("h3",{attrs:{id:"selection-和-range-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#selection-和-range-对象","aria-hidden":"true"}},[e._v("#")]),e._v(" Selection 和 Range 对象")]),e._v(" "),n("p",[e._v("我们在执行 "),n("code",[e._v("document.execCommand")]),e._v(" 这个命令之前首先要知道对谁执行，所以这里会有一个选区的概念，也就是 "),n("code",[e._v("Selection")]),e._v(" 对象，它用来表示用户选择的范围或光标位置（光标可以看做是范围重合的特殊状态），一个页面用户可能选择多个范围（比如 Firefox）。也就是说 "),n("code",[e._v("Selection")]),e._v(" 包含一个或多个 "),n("code",[e._v("Range")]),e._v(" 对象（"),n("code",[e._v("Selection")]),e._v(" 可以说是 "),n("code",[e._v("Range")]),e._v(" 的集合），当然对于富文本编辑器来说，一般情况下，我们只会有一个选择区域，也就是一个 "),n("code",[e._v("Range")]),e._v(" 对象，事实上大部分情况也是如此。\n所以通常我们可以用 "),n("code",[e._v("let range = window.getSelection().getRangeAt(0)")]),e._v(" 来获取选中的内容信息（"),n("code",[e._v("getRangeAt")]),e._v(" 接受一个索引值，因为会有多个 "),n("code",[e._v("Range")]),e._v("，而现在只有一个，所以写 0）。\n看得一头雾水 😴？没关系，看下面两张图就懂了 😮：")]),e._v(" "),n("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1280",height:"496"}}),e._v(")")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/6/18/16b6a1a61fa6f471?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),e._v(" "),n("p",[e._v("一句话说就是：通过上面那句命令我们能够获取到当前的选中信息，一般会先保存下来，然后在需要的时候还原。此外 "),n("code",[e._v("Selection")]),e._v(" 对象还有几个常用的方法，"),n("code",[e._v("addRange")]),e._v("、"),n("code",[e._v("removeAllRanges")]),e._v("、"),n("code",[e._v("collapse")]),e._v(" 和 "),n("code",[e._v("collapseToEnd")]),e._v(" 等等。\n这个知识点是很重要的，因为它让我们有了操纵光标的能力（比如插入内容之后设置光标的位置），不过这篇文章中我并没有去深入它，只是浅出 😏。")]),e._v(" "),n("h2",{attrs:{id:"目标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#目标","aria-hidden":"true"}},[e._v("#")]),e._v(" 目标")]),e._v(" "),n("p",[e._v("开篇一顿扯，下面让我们抓紧时间做一个属于自己的富文本吧 💪，大概会包含以下几个功能：加粗、段落、H1、水平线、无序列表、插入链接、插入图片、后退一步、向前一步等等。🆗，Let's do it!")]),e._v(" "),n("h3",{attrs:{id:"起步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#起步","aria-hidden":"true"}},[e._v("#")]),e._v(" 起步")]),e._v(" "),n("p",[e._v("首先一个富文本大体分为两个区域，一个是按钮区，一个是编辑区。所以它的大致结构就像下面这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n    <div class="xr-editor">\n        \x3c!--按钮区--\x3e\n        <div class="nav">\n            <button>加粗</button>\n            ...\n        </div>\n        \x3c!--编辑区--\x3e\n        <div class="editor" contenteditable="true"></div>\n    </div>\n</template>\n\x3c!--全部样式就这些，这里就都先给出来了--\x3e\n<style lang="scss">\n.xr-editor {\n  margin: 50px auto;\n  width: 1000px;\n  .nav {\n    display: flex;\n    button {\n      cursor: pointer;\n    }\n    &__img {\n      position: relative;\n      input {\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        left: 0;\n        top: 0;\n        opacity: 0;\n      }\n    }\n  }\n  .row {\n    display: flex;\n    width: 100%;\n    height: 300px;\n  }\n  .editor {\n    flex: 1;\n    position: relative;\n    margin-right: 20px;\n    padding: 10px;\n    outline: none;\n    border: 1px solid #000;\n    overflow-y: scroll;\n    img {\n      max-width: 300px;\n      max-height: 300px;\n      vertical-align: middle;\n    }\n  }\n  .content {\n    flex: 1;\n    border: 1px solid #000;\n    word-break: break-all;\n    word-wrap: break-word;\n    overflow: scroll;\n  }\n}\n</style>\n复制代码\n')])])]),n("p",[e._v("嗯，起步工作到此结束，接下来就可以直接开始实现功能了 😬。")]),e._v(" "),n("h3",{attrs:{id:"加粗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加粗","aria-hidden":"true"}},[e._v("#")]),e._v(" 加粗")]),e._v(" "),n("p",[e._v("现在假如我们要实现加粗的效果，该怎么做呢？很简单，只要在点击加粗按钮的时候执行 "),n("code",[e._v("document.execCommand('bold', false, null)")]),e._v(" 这句话，就能达到加粗的效果，就像下面这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n    <div class=\"nav\">\n        <button @click=\"execCommand\">加粗</button>\n    </div>\n    ...\n</template>\n<script>\nexport default {\n  name: 'XrEditor',\n  methods: {\n    execCommand() {\n      document.execCommand('bold', false, null);\n    }\n  }\n};\n<\/script>\n复制代码\n")])])]),n("p",[e._v("让我们运行一下看看效果：")]),e._v(" "),n("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"352",height:"420"}}),e._v(")")]),e._v(" "),n("p",[e._v("嗯，是的，就是这么简单的一句话就能搞定 😒。\n当然了，我们开篇也说了我们的一切命令都是基于 "),n("code",[e._v("document.execCommand")]),e._v(" 的，所以我们先小小改写一下上面代码中的 "),n("code",[e._v("execCommand")]),e._v(" 方法，就像下面这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n    <div class=\"nav\">\n        <button @click=\"execCommand('bold')\">加粗</button>\n    </div>\n    ...\n</template>\n<script>\nexport default {\n  name: 'XrEditor',\n  methods: {\n    execCommand(name, args = null) {\n    \tdocument.execCommand(name, false, args);\n    }\n  }\n};\n<\/script>\n复制代码\n")])])]),n("p",[e._v("这样一来代码就更具通用性了。实现列表、水平线、前进、后退功能和加粗是一样样的，只需传入不同的命令名即可，就像下面这样，这里就不一一赘述了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<button @click=\"execCommand('insertUnorderedList')\">无序列表</button>\n<button @click=\"execCommand('insertHorizontalRule')\">水平线</button>\n<button @click=\"execCommand('undo')\">后退</button>\n<button @click=\"execCommand('redo')\">前进</button>\n复制代码\n")])])]),n("p",[e._v("顺带给大家说几个注意点 ✍️：")]),e._v(" "),n("ol",[n("li",[e._v("有的同学可能用的不是 "),n("code",[e._v("button")]),e._v(" 标签，然后执行命令就会无效，是因为点击其他标签大多都会造成先失去焦点（或者不知不觉就突然失去焦点了），再执行点击事件，此时没有选区或光标所以会没有效果，这点要留意一下。")]),e._v(" "),n("li",[e._v("我们执行的是原生的 "),n("code",[e._v("document.execCommand")]),e._v(" 方法，浏览器自身会对 "),n("code",[e._v("contenteditable")]),e._v(" 这个可编辑区维护一个 "),n("code",[e._v("undo")]),e._v(" 栈和一个 "),n("code",[e._v("redo")]),e._v(" 栈，所以我们才能执行前进和后退的操作，如果我们改写了原生方法，就会破坏原有的栈结构，这时就需要自己去维护，那就麻烦了。")]),e._v(" "),n("li",[n("code",[e._v("style")]),e._v(" 里面如果加上 "),n("code",[e._v("scope")]),e._v(" 的话，里面的样式对编辑区的内容是不生效的，因为编辑区里面是后来才创建的元素，所以要么删了 "),n("code",[e._v("scope")]),e._v("，要么用 "),n("code",[e._v("/deep/")]),e._v(" 解决（Vue 是这样）。")])]),e._v(" "),n("h3",{attrs:{id:"段落"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#段落","aria-hidden":"true"}},[e._v("#")]),e._v(" 段落")]),e._v(" "),n("p",[e._v("这个功能就是把光标所在行的文字用 "),n("code",[e._v("p")]),e._v(" 标签包裹起来，为了演示方便，我们顺便把编辑区的 "),n("code",[e._v("html")]),e._v(" 结构打印出来，所以让我们稍微改一下代码，就像下面这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n    <div class="xr-editor">\n        <div class="nav">\n            <button @click="execCommand(\'bold\')">加粗</button>\n            <button @click="execCommand(\'formatBlock\', \'<p>\')">段落</button>\n        </div>\n        <div class="row">\n            <div class="editor" contenteditable="true" @input="print"></div>\n            <div class="content">{{ html }}</div>\n        </div>\n    </div>\n</template>\n<script>\nexport default {\n  name: \'XrEditor\',\n  data() {\n    return {\n      html: \'\'\n    };\n  },\n  methods: {\n    execCommand(name, args = null) {\n      document.execCommand(name, false, args);\n    },\n    print() {\n      this.html = document.querySelector(\'.editor\').innerHTML;\n    }\n  }\n};\n<\/script>\n复制代码\n')])])]),n("p",[e._v("运行效果如下：")]),e._v(" "),n("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"419",height:"236"}}),e._v(")")]),e._v(" "),n("p",[e._v("怎么样，是不是也很 easy，同理，"),n("code",[e._v("h1")]),e._v(" ~ "),n("code",[e._v("h6")]),e._v(" 也是一样的，命令为 "),n("code",[e._v("execCommand('formatBlock', '')")]),e._v("，也不赘述了。")]),e._v(" "),n("h3",{attrs:{id:"插入链接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插入链接","aria-hidden":"true"}},[e._v("#")]),e._v(" 插入链接")]),e._v(" "),n("p",[e._v("这个功能因为需要第三个参数，所以我们一般会给个提示框获取用户输入，然后再执行 "),n("code",[e._v("execCommand('createLink', 链接地址)")]),e._v("，代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<button @click=\"createLink\">链接</button>\n复制代码\ncreateLink() {\n  let url = window.prompt('请输入链接地址');\n  if (url) this.execCommand('createLink', url);\n}\n复制代码\n")])])]),n("p",[e._v("效果如下：")]),e._v(" "),n("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"420",height:"258"}}),e._v(")")]),e._v(" "),n("p",[e._v("插入图片链接也是异曲同工，只不过命令名不一样而已：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("insertImgLink() {\n    let url = window.prompt('请输入图片地址');\n    if (url) this.execCommand('insertImage', url);\n}\n复制代码\n")])])]),n("h3",{attrs:{id:"插入图片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插入图片","aria-hidden":"true"}},[e._v("#")]),e._v(" 插入图片")]),e._v(" "),n("p",[e._v("图片除了可以通过添加地址的形式外，还可以添加 base64 格式的图片，这里我们通过 "),n("code",[e._v("readAsDataURL(file)")]),e._v(" 来读取图片，并执行 "),n("code",[e._v("execCommand('insertImage', base64)")]),e._v(" 就大功告成啦，具体代码如下，并不复杂：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<button class="nav__img">插入图片\n    \x3c!--这个 input 是隐藏的--\x3e\n    <input type="file" accept="image/gif, image/jpeg, image/png" @change="insertImg">\n</button>\n复制代码\ninsertImg(e) {\n    let reader = new FileReader();\n    let file = e.target.files[0];\n    reader.onload = () => {\n        let base64Img = reader.result;\n        this.execCommand(\'insertImage\', base64Img);\n        document.querySelector(\'.nav__img input\').value = \'\'; // 解决同一张图片上传无效的问题\n    };\n    reader.readAsDataURL(file);\n}\n复制代码\n')])])]),n("p",[e._v("运行一下，看看效果：")]),e._v(" "),n("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"420",height:"263"}}),e._v(")")]),e._v(" "),n("p",[e._v("这应该也不是很难。当然了，你也可以先上传到服务器处理返回 "),n("code",[e._v("url")]),e._v(" 地址再插入也是可以的。\n👌 至此，一个简易版的富文本就完成了（当然了 bug 也是有的 🤭，不过并不妨碍我们理解），具体代码可以参考 npm 上的 "),n("code",[e._v("pell")]),e._v(" 包，它已经是个极简版的了。")]),e._v(" "),n("h2",{attrs:{id:"进阶"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进阶","aria-hidden":"true"}},[e._v("#")]),e._v(" 进阶")]),e._v(" "),n("p",[e._v("其实富文本对文本的操作大多都可以用原生命令来实现，但是对图片的操作也许就不那么容易了，来个拉伸、旋转啥的就够我们折腾了 🤨，所以这里以图片拉伸为例子着重讲解一下。")]),e._v(" "),n("h3",{attrs:{id:"图片拉伸"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图片拉伸","aria-hidden":"true"}},[e._v("#")]),e._v(" 图片拉伸")]),e._v(" "),n("p",[e._v("我们先看下大致效果，大家也可以先停下来思考一分钟看看如何实现 🤔：")]),e._v(" "),n("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"419",height:"255"}}),e._v(")")]),e._v(" "),n("p",[e._v("👌，首先我们要知道的是图片已经在编辑区了，所以当用户点击编辑区里面的图片时我们需要做些事件监听并有所处理，具体思路如下（这部分代码较多，不想看的可以略过，但标题要看）：")]),e._v(" "),n("h4",{attrs:{id:"_1-判断用户点击的是否是编辑区里面的图片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-判断用户点击的是否是编辑区里面的图片","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. 判断用户点击的是否是编辑区里面的图片")]),e._v(" "),n("p",[e._v("这个就是看点击事件 "),n("code",[e._v("e.target.tagName")]),e._v(" 是不是 "),n("code",[e._v("img")]),e._v(" 标签了，代码如下，应该比较简单：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mounted() {\n    this.editor = document.querySelector('.editor');\n    this.editor.addEventListener('click', this.handleClick);\n},\nmethods: {\n    handleClick(e) {\n        if (\n            e.target &&\n            e.target.tagName &&\n            e.target.tagName.toUpperCase() === 'IMG'\n        ) {\n            this.handleClickImg(e.target);\n        }\n    }\n}\n复制代码\n")])])]),n("h4",{attrs:{id:"_2-在点击的图片上创建个大小一样的-div"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-在点击的图片上创建个大小一样的-div","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 在点击的图片上创建个大小一样的 div")]),e._v(" "),n("p",[e._v("如果点击的是一个图片，那我们就创建一个 "),n("code",[e._v("div")]),e._v(" ，暂且把这个 "),n("code",[e._v("div")]),e._v(" 叫做蒙层吧，顺便先看张示意图：")]),e._v(" "),n("p",[e._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"656",height:"818"}}),e._v(")")]),e._v(" "),n("p",[e._v("也就是动态创建一个蒙层（和图片一样大小）以及四个拖拽顶点，并定位到和图片一样的位置，代码如下（代码有点多，可跳过，知道大致意思就行 😬）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("handleClickImg(img) {\n    this.nowImg = img;\n    this.showOverlay();\n}\nshowOverlay() {\n    // 添加蒙层\n    this.overlay = document.createElement('div');\n    this.editor.appendChild(this.overlay);\n    // 定位蒙层和大小\n    this.repositionOverlay();\n},\nrepositionOverlay() {\n    let imgRect = this.nowImg.getBoundingClientRect();\n    let editorRect = this.editor.getBoundingClientRect();\n    // 设置蒙层宽高和位置\n    Object.assign(this.overlay.style, {\n        position: 'absolute',\n        top: `${imgRect.top - editorRect.top + this.editor.scrollTop}px`,\n        left: `${imgRect.left -\n          editorRect.left -\n          1 +\n          this.editor.scrollLeft}px`,\n        width: `${imgRect.width}px`,\n        height: `${imgRect.height}px`,\n        boxSizing: 'border-box',\n        border: '1px dashed red'\n    });\n    // 添加四个顶点拖拽框\n    this.createBox();\n},\ncreateBox() {\n    this.boxes = [];\n    this.addBox('nwse-resize'); // top left\n    this.addBox('nesw-resize'); // top right\n    this.addBox('nwse-resize'); // bottom right\n    this.addBox('nesw-resize'); // bottom left\n    this.positionBoxes(); // 设置四个拖拽框位置\n},\naddBox(cursor) {\n    const box = document.createElement('div');\n    Object.assign(box.style, {\n        position: 'absolute',\n        height: '12px',\n        width: '12px',\n        backgroundColor: 'white',\n        border: '1px solid #777',\n        boxSizing: 'border-box',\n        opacity: '0.80'\n    });\n    box.style.cursor = cursor;\n    box.addEventListener('mousedown', this.handleMousedown);  // 顺便添加事件\n    this.overlay.appendChild(box);\n    this.boxes.push(box);\n},\npositionBoxes() {\n    let handleXOffset = `-6px`;\n    let handleYOffset = `-6px`;\n    [{ left: handleXOffset, top: handleYOffset },\n    { right: handleXOffset, top: handleYOffset },\n    { right: handleXOffset, bottom: handleYOffset },\n    { left: handleXOffset, bottom: handleYOffset }].forEach((pos, idx) => {\n        Object.assign(this.boxes[idx].style, pos);\n    });\n},\n复制代码\n")])])]),n("h4",{attrs:{id:"_3-在四个顶点框上添加拖拽事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-在四个顶点框上添加拖拽事件","aria-hidden":"true"}},[e._v("#")]),e._v(" 3. 在四个顶点框上添加拖拽事件")]),e._v(" "),n("p",[e._v("这里我们会在四个顶点监听 "),n("code",[e._v("mousedown")]),e._v(" 事件，按下鼠标时，首先会改变鼠标样式（就是鼠标会变成调整大小的那种图标），然后监听 "),n("code",[e._v("mousemove")]),e._v(" 和 "),n("code",[e._v("mouseup")]),e._v(" 事件，计算出水平拖拽距离，然后重新设置图片大小和浮层大小，大概这么个意思，简要代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("handleMousedown(e) {\n    this.dragBox = e.target;\n    this.dragStartX = e.clientX;\n    this.preDragWidth = this.nowImg.width;\n    this.setCursor(this.dragBox.style.cursor);\n    document.addEventListener('mousemove', this.handleDrag);\n    document.addEventListener('mouseup', this.handleMouseup);\n},\nhandleDrag(e) {\n    // 计算水平拖动距离\n    const deltaX = e.clientX - this.dragStartX;\n    // 修改图片大小\n    if (this.dragBox === this.boxes[0] || this.dragBox ===     this.boxes[3]) { // 左边的两个框\n        this.nowImg.width = Math.round(this.preDragWidth - deltaX);\n    } else { // 右边的两个框\n        this.nowImg.width = Math.round(this.preDragWidth + deltaX);\n    }\n    // 同时修改蒙层大小\n    this.repositionOverlay();\n},\nhandleMouseup() {\n    this.setCursor('');\n    // 拖拽结束移除事件监听\n    document.removeEventListener('mousemove', this.handleDrag);\n    document.removeEventListener('mouseup', this.handleMouseup);\n},\nsetCursor(value) {\n    // 设置鼠标样式\n    [document.body, this.nowImg].forEach(el => {\n        el.style.cursor = value;\n    });\n}\n复制代码\n")])])]),n("p",[e._v("当然问题还是有的，不过我们知道这个思路就行。具体代码可以去看下 npm 上的 "),n("code",[e._v("quill-image-resize-module")]),e._v(" 包，我也是按照这个包的思路来讲解的 😂。。。")]),e._v(" "),n("h3",{attrs:{id:"操纵光标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#操纵光标","aria-hidden":"true"}},[e._v("#")]),e._v(" 操纵光标")]),e._v(" "),n("p",[e._v("除了不好对图片进行处理外，光标应该也是一大坑，你可能不知道什么时候就失去焦点了，此时再点击按钮执行命令就无效了；有时你又需要还原或设置光标的位置，比如插入图片后，光标要设置到图片后面等等之类的。\n所以我们需要具有控制光标的能力，具体操作就是在点击按钮之前我们可以先存储当前光标的状态，执行完命令或者在需要的时候后再还原或设置光标的状态即可。由于在 chrome 中，失去焦点并不会清除 "),n("code",[e._v("Seleciton")]),e._v(" 对象和 "),n("code",[e._v("Range")]),e._v(" 对象，所以就像我一开始说的我没怎么去了解 🙄。。。这里就只简要展示两个方法给大家看下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function saveSelection() { // 保存当前Range对象\n    let selection = window.getSelection();\n    if(selection.rangeCount > 0){\n        return sel.getRangeAt(0);\n    }\n    return null;\n};\nlet selectedRange = saveSelection();\nfunction restoreSelection() {\n    let selection = window.getSelection();\n    if (selectedRange) {\n        selection.removeAllRanges();  // 清空所有 Range 对象\n        selection.addRange(selectedRange); // 恢复保存的 Range\n    }\n}\n复制代码\n")])])]),n("p",[e._v("以上就是今天所要分享的内容，感谢你的阅读，大赞无疆 👀 。。。。")]),e._v(" "),n("h2",{attrs:{id:"结语"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结语","aria-hidden":"true"}},[e._v("#")]),e._v(" 结语")]),e._v(" "),n("p",[e._v("回到开头我们讲的那个需求，关于图片旋转的，根据上面的思路，你可以在蒙层上加个旋转图标，并添加点击事件，然后修改图片和蒙层 "),n("code",[e._v("transform")]),e._v(" 属性，当然了位置也要变，可能需要些计算，我也没试过，不知道效果咋样 😂。\n另外一种方法就是在插入图片之前先对图片进行处理（比如多一步类似裁剪的功能）再上传，这样就可以不用在编辑区里面处理图片啦，嘿嘿，目前我就想到这两种方案了，实际工作中采用的是第二种方式，因为产品的需求不止于旋转 😭。\n最后的最后，不知道大家有没有更好的方法来对图片或内容进行处理，欢迎在下面留言探讨，See you👋。\n"),n("Valine")],1)])},[],!1,null,null,null);t.default=s.exports}}]);