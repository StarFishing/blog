(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{307:function(t,s,a){"use strict";a.r(s);var n=a(39),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"intersectionobserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intersectionobserver","aria-hidden":"true"}},[t._v("#")]),t._v(" IntersectionObserver")]),t._v(" "),a("p",[t._v("使用场景")]),t._v(" "),a("ul",[a("li",[t._v("判断 DOM 出现在屏幕上以记录浏览量")]),t._v(" "),a("li",[t._v("实现 img 标签的懒加载")]),t._v(" "),a("li",[t._v("做一些数据上报...")])]),t._v(" "),a("h2",{attrs:{id:"什么是-intersectionobserver？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-intersectionobserver？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是 IntersectionObserver？")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("**IntersectionObserver**")]),a("strong",[t._v("接口")]),t._v(" (从属于"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intersection Observer API"),a("OutboundLink")],1),t._v(") 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗("),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/viewport",target:"_blank",rel:"noopener noreferrer"}},[t._v("viewport"),a("OutboundLink")],1),t._v(")交叉状态的方法。祖先元素与视窗("),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/viewport",target:"_blank",rel:"noopener noreferrer"}},[t._v("viewport"),a("OutboundLink")],1),t._v(")被称为"),a("strong",[t._v("根(root)。")])]),t._v(" "),a("p",[t._v("当一个"),a("code",[t._v("IntersectionObserver")]),t._v("对象被创建时，其被配置为监听根中一段给定比例的可见区域。一旦 IntersectionObserver 被创建，则无法更改其配置，所以一个给定的观察者对象只能用来监听可见区域的特定变化值；然而，你可以在同一个观察者对象中配置监听多个目标元素。")])]),t._v(" "),a("p",[t._v("重点看这里"),a("strong",[t._v("监听目标元素与其祖先或视窗交叉状态的手段")]),t._v("，其实就是观察一个元素是否在视窗可见。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/04/RqPLZ2GSgIeDOYs.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看到，交叉了就是说明当前元素在视窗里，当前就是可见的了。")]),t._v(" "),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api","aria-hidden":"true"}},[t._v("#")]),t._v(" API")]),t._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" io "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntersectionObserver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("其实就是一个简单的构造函数。")]),t._v(" "),a("p",[t._v("以上代码会返回一个"),a("code",[t._v("IntersectionObserver")]),t._v("实例，"),a("code",[t._v("callback")]),t._v("是当元素的可见性变化时候的回调函数，"),a("code",[t._v("options")]),t._v("是一些配置项（可选）。")]),t._v(" "),a("p",[t._v("我们使用返回的这个实例来进行一些操作。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  开始观察，接受一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("节点对象\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面两个函数很有用，在合适的时候停止和关闭观察器有利于节省性能")]),t._v("\nio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unobserve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   停止观察 接受一个element元素\nio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("disconnect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 关闭观察器\n")])])]),a("h3",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options","aria-hidden":"true"}},[t._v("#")]),t._v(" options")]),t._v(" "),a("p",[t._v("root")]),t._v(" "),a("p",[t._v("用于观察的根元素，默认是浏览器的视口，也可以指定具体元素，指定元素的时候用于观察的元素必须是指定元素的子元素")]),t._v(" "),a("p",[t._v("threshold")]),t._v(" "),a("p",[t._v("用来指定交叉比例，决定什么时候触发回调函数，是一个数组，默认是"),a("code",[t._v("[0]")]),t._v("。他代表的是"),a("strong",[t._v("观察的元素出现在视图中的高度（或观察的 root 节点）与他自身的高度的百分比")]),t._v("， 如果不关闭观察器，则回调函数会在数组中的每个临界点触发。这是一个左开右闭的区间，之所以这样说请看案例：")]),t._v(" "),a("div",{staticClass:"language-dart extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" options "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    threshold"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" io "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntersectionObserver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("上面代码，我们指定了交叉比例为 0，0.5，1，当观察元素 img0%、50%、100%时候都会触发回调函数，你以为只会触发三次吗？当然不是，其实他触发了四次回调，如下图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/04/hxH1i3bdltp2qOk.jpg",alt:""}})]),t._v(" "),a("p",[t._v("intersectionRatio 代表了交叉比例，从图中可以看出在元素还没出现在视图中时已经调用了一次回调函数，此时 intersectionRatio 为 0，这就是上面提到的左开右闭，0 这个临界点比较特殊，他会在左右区间都触发回调。（如不关闭观察器则回调会在每次经过临界点触发）")]),t._v(" "),a("p",[t._v("rootMargin")]),t._v(" "),a("p",[t._v("用来扩大或者缩小视窗的的大小，使用 css 的定义方法，"),a("code",[t._v("10px 10px 30px 20px")]),t._v("表示 top、right、bottom 和 left 的值")]),t._v(" "),a("div",{staticClass:"language-dart extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" options "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.box'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    threshold"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    rootMargin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'30px 100px 20px'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("为了方便理解，我画了张图，如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/04/9e7prS6nPGYxgCo.png",alt:"img"}})]),t._v(" "),a("p",[t._v("options")]),t._v(" "),a("p",[t._v("首先我们来看下图上的问题，蓝线是什么呢？他就是咱们定义的 root 元素，我们添加了"),a("code",[t._v("rootMargin")]),t._v("属性，将视窗的增大了，虚线就是现在的视窗，所以元素现在也就在视窗里面了。")]),t._v(" "),a("p",[t._v("由此可见，root 元素只有在"),a("code",[t._v("rootMargin")]),t._v("为空的时候才是绝对的视窗。")]),t._v(" "),a("p",[t._v("说了简单的 options，接下来我们看下"),a("code",[t._v("callback")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#callback","aria-hidden":"true"}},[t._v("#")]),t._v(" callback")]),t._v(" "),a("p",[t._v("上面我们说到，当元素的可见性变化时，就会触发 callback 函数。")]),t._v(" "),a("p",[t._v("callback 函数会触发两次，元素进入视窗（开始可见时）和元素离开视窗（开始不可见时）都会触发")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" io "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntersectionObserver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("entries")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("以上代码，请在 chrome 控制台进行调试，这里我使用了"),a("code",[t._v("$0")]),t._v("选择了上一次我审查元素的选择的节点")]),t._v(" "),a("p",[t._v("运行结果如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/04/lK4OTxnIyD8MwGe.png",alt:"img"}})]),t._v(" "),a("p",[t._v("运行结果")]),t._v(" "),a("p",[t._v("我们可以看到 callback 函数有个"),a("code",[t._v("entries")]),t._v("参数，它是个"),a("code",[t._v("IntersectionObserverEntry")]),t._v("对象数组，接下来我们重点说下 IntersectionObserverEntry 对象")]),t._v(" "),a("h3",{attrs:{id:"intersectionobserverentry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intersectionobserverentry","aria-hidden":"true"}},[t._v("#")]),t._v(" IntersectionObserverEntry")]),t._v(" "),a("p",[a("code",[t._v("IntersectionObserverEntry")]),t._v("提供观察元素的信息，有七个属性。")]),t._v(" "),a("blockquote",[a("p",[t._v("boundingClientRect 目标元素的矩形信息\nintersectionRatio 相交区域和目标元素的比例值 intersectionRect/boundingClientRect 不可见时小于等于 0\nintersectionRect 目标元素和视窗（根）相交的矩形信息 可以称为相交区域\nisIntersecting 目标元素当前是否可见 Boolean 值 可见为 true\nrootBounds 根元素的矩形信息，没有指定根元素就是当前视窗的矩形信息\ntarget 观察的目标元素\ntime 返回一个记录从"),a("code",[t._v("IntersectionObserver")]),t._v("的时间到交叉被触发的时间的时间戳")])]),t._v(" "),a("p",[t._v("上面几个矩形信息的关系如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/04/utVbx8SLPQemkIh.png",alt:"img"}})]),t._v(" "),a("p",[t._v("关系.png")]),t._v(" "),a("p",[t._v("👇 划重点")]),t._v(" "),a("p",[a("strong",[t._v("intersectionRatio")]),t._v("和"),a("strong",[t._v("isIntersecting")]),t._v("是用来判断元素是否可见的，押题咯...")]),t._v(" "),a("h3",{attrs:{id:"懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒加载","aria-hidden":"true"}},[t._v("#")]),t._v(" 懒加载")]),t._v(" "),a("p",[t._v("好了，通过上面一些概念我们大概了解了"),a("code",[t._v("IntersectionObserver")]),t._v("是个什么东西，接下来我们用它来写点代码，写什么呢？没错就是懒加载。")]),t._v(" "),a("p",[t._v("通过 IntersectionObserver 来实现懒加载，就简单的多了，我们只需要设置回调，判断当前元素是否可见，再进行渲染操作就行了，而不用去关心内部的计算。")]),t._v(" "),a("p",[t._v("主要代码如下")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" io "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntersectionObserver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例化 默认基于当前视窗")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ings "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelectorAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[data-src]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将图片的真实url设置为data-src src属性为占位图 元素可见时候替换src")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("entries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  entries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历entries数组")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isIntersecting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前元素可见")]),t._v("\n      item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dataset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 替换src")]),t._v("\n      io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unobserve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 停止观察当前元素 避免不可见时候再次调用callback函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nimgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// io.observe接受一个DOM元素，添加多个监听 使用forEach")]),t._v("\n  io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"⚠️-注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⚠️-注意","aria-hidden":"true"}},[t._v("#")]),t._v(" ⚠️ 注意")]),t._v(" "),a("p",[t._v("目前 IntersectionObserver 是一个实验中的功能，请酌情使用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/01/04/PwVQNluJOBj8pfZ.png",alt:"img"}})]),t._v(" "),a("p",[t._v("转载作者：an 祭\n链接：https://www.jianshu.com/p/84a86e41eb2b")])])},[],!1,null,null,null);s.default=e.exports}}]);